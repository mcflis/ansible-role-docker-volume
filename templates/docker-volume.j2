#!/usr/bin/env bash

set -e

host_backup_dir={{ docker_volume_host_backup_dir }}

die() { echo "$*" >&2; exit 2; }  # complain to STDERR and exit with error

while getopts d:-: OPT; do
  # taken from (and adapted): https://stackoverflow.com/a/28466267/519360
  case "$OPT" in
    d )    host_backup_dir=$([ "$OPTARG" != "${OPTARG#/}" ] && echo "$OPTARG" || echo "$(pwd)/$OPTARG") ;;
    ??* )  die "Illegal option --$OPT" ;;  # bad long option
    ? )    exit 2 ;;  # bad short option (error reported via getopts)
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

command=$1
commands=(
  backup
  restore
  help
)
container_backup_dir=/backup
container_name="$2"
container_data_dirs=("${@:3}")
backup_filename="$container_backup_dir/$container_name.tar.gz"
host_backup_filename="$host_backup_dir/$(basename "$backup_filename")"
container_image=alpine
docker_args=(
  run
  --rm
  -w /
  -v "$host_backup_dir:$container_backup_dir"
  --volumes-from "$container_name"
  "$container_image"
)

help() {
  cat <<-END
usage: $(basename "$0") [OPTS] <command> <container-name> <container-data-dirs>

options:
  -d    specifies where backup archives are located on the host, default: "$host_backup_dir"

commands:
$(printf "  %s\n" "${commands[@]}")

example: $(basename "$0") backup my-container data/dir/1 data/dir/2
  Do not use leading forward slashes when specifying container-data-dirs
END
}

# backup files from a docker volume into a compressed archive
backup() {
  local restart="false"
  local exit_code=0

  if ! docker container inspect "$container_name" >/dev/null; then
    exit 1
  fi

  restart="$(docker container inspect -f '{% raw %}{{{% endraw %}.State.Running}}' "$container_name")"
  if [ "$restart" == "true" ]; then
    echo "Stopping container $container_name"
    docker stop "$container_name"
  else
    echo "Container was not running -> no need to stop it"
  fi

  echo "Creating backup of container data from $container_name in $host_backup_filename"
  if ! docker "${docker_args[@]}" tar -czvf "$backup_filename" "${container_data_dirs[@]}"; then
    echo "Backup failed, will try to restore previous container state..."
    exit_code=1
  fi

  # start container if was running
  if [ "$restart" == "true" ]; then
    echo "Starting container $container_name"
    docker start "$container_name"
  else
    echo "Container $container_name was not running -> no need to start it"
  fi
  exit "$exit_code"
}

# restore files from a compressed archive into a docker volume
restore() {
  docker "${docker_args[@]}" tar -xzvf "$backup_filename" "${@:2}"
  echo "Restored files:"
  docker "${docker_args[@]}" ls -lh "${@:2}"
}

if ! printf '%s\n' "${commands[@]}" | grep -q "^${command}$"; then
  echo -e "Command $command not found\n"
  help
  exit 1
fi

mkdir -p "$host_backup_dir"
"$command" "$container_name" "${container_data_dirs[@]}"
